Argocd Setup
-------------

1. kubectl create namespace argocd

2. kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

Edit the deploy file add((- --insecure) in 61th line under containers command
-----------------------------------------------------------------------------

3. kubectl edit deploy argocd-server -n argocd
   61         - --insecure


4. Create ingress.yaml for argocd 


vi argocd-ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: argocd-server-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  rules:
  - host: argocd.harecloud.xyz      
    http:
      paths:
      - path: /
        backend:
          serviceName: argocd-server
          servicePort: https
  tls:
  - hosts:
      - argocd.harecloud.xyz 
    secretName: argocd-secret

5. kubectl apply -f argocd-ingress.yaml -n argocd

6. kubectl get ing -n argocd 

Now You can get network load balancer and domain name, access the argocd-ui.

7. Kubectl get po -n argocd
You can get pods like this.

argocd-application-controller-0       1/1     Running   0          40m
argocd-dex-server-6dc48777d4-s8xz4    1/1     Running   0          40m
argocd-redis-66b48966cb-p69r7         1/1     Running   0          40m
argocd-repo-server-7b579957d9-m5xn5   1/1     Running   0          40m
argocd-server-75b9764584-txc58        1/1     Running   0          37m

8. Login Credentials are: 

Username: admin
Password: argocd-server pod name like (argocd-server-75b9764584-txc58)





Secure Your argocd-server:
--------------------------
1. Create a namespace

   kubectl create namespace cert-manager

2. Install cert-manager

kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml

3: Create a certificate issuer

vi certificate-issuer.yaml 

apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: mrkenanbek@gmail.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    solvers:
    - http01:
        ingress:
          class: nginx

and apply changes:

kubectl apply -f certificate-issuer.yaml

4. Update your ingress.yaml file with annotations on metadata and tls under spec

metadata:
  name: codekn-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
      - codekn.com(Your Domain Name)
    secretName: argocd-secret

  Apply these changes and apply it.

5. Referring purpose your ingress.yaml file looks like(Its optional)

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: codekn-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
      - codekn.com
    secretName: codekn-tls
  rules:
  - host: codekn.com
    http:
      paths:
      - path: /
        backend:
          serviceName: codekn-service
          servicePort: 8081
      - path: /api
        backend:
          serviceName: codekn-service
          servicePort: 8082
  - host: dev.codekn.com
    http:
      paths:
        - path: /
          backend:
            serviceName: codekn-service
            servicePort: 8082
        - path: /api
          backend:
            serviceName: codekn-service
            servicePort: 8082


Thanks,
Kumar


